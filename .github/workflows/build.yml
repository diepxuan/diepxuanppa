# Runs tests and verifies that the package can be built.
name: Build

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [main]

  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  package-load:
    # runs-on: ubuntu-latest
    runs-on: ${{matrix.operating-system}}
    strategy:
      matrix:
        operating-system: [ubuntu-latest]
    outputs:
      packages: ${{ steps.packages.outputs.packages }}
    steps:
      - uses: actions/checkout@v4
      - name: Generate matrix data
        id: packages
        shell: bash
        run: |
          pkgs=$(ls -l src/diepxuan/ | grep '^d' | awk '{print $NF}' | while read dir; do echo $dir; done)
          json=$(printf '%s\n' "${pkgs}" | jq -R . | jq -s -c .)
          echo "packages=$json" >> "$GITHUB_OUTPUT"
  # This workflow contains a single job called "build"
  package-build:
    needs: package-load
    runs-on: ${{matrix.operating-system}}
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ubuntu-22.04, ubuntu-20.04]
        # operating-system: [ubuntu-latest]
        m2module: ${{ fromJSON(needs.package-load.outputs.packages) }}
    name: Build "${{ matrix.m2module }}" module on ${{ matrix.operating-system }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup GPG
        uses: diepxuan/.github/.github/actions/gpg-setup@main
        with:
          gpg_key: ${{ secrets.GPG_KEY }}
          gpg_key_id: ${{ secrets.GPG_KEY_ID }}
          committer_email: ${{ secrets.GIT_COMMITTER_EMAIL }}
          committer_name: ${{ github.repository_owner }}

      - name: SSH configuration
        uses: diepxuan/.github/.github/actions/ssh-setup@main
        with:
          ssh_key_id: ${{ secrets.SSH_ID_RSA }}

      - name: Installing build dependencies
        if: ${{ false }}
        run: |
          sudo apt update
          sudo apt install -y reprepro gnupg
      
      - name: Dynamically environment
        shell: bash
        run: |
          sudo timedatectl set-timezone Asia/Ho_Chi_Minh
          # os evironment
          [[ -f /etc/os-release ]] && . /etc/os-release
          [[ -f /etc/lsb-release ]] && . /etc/lsb-release
          CODENAME=${CODENAME:-$DISTRIB_CODENAME}
          CODENAME=${CODENAME:-$VERSION_CODENAME}
          CODENAME=${CODENAME:-$UBUNTU_CODENAME}
          env CODENAME $CODENAME
        env:
          repository: ${{ github.repository }}
          branch: ${{ github.ref_name }}
          OBS_USERNAME: ${{ secrets.OBS_USERNAME }}
          OBS_TOKEN: ${{ secrets.OBS_TOKEN }}
          OBS_PW: ${{ secrets.OBS_PW }}
          OBS_OPPW: ${{ secrets.OBS_OPPW }}
          KITE_TOKEN: ${{ secrets.KITE_TOKEN }}
      
      - name: Build package
        working-directory: src/diepxuan/${{ matrix.m2module }}
        shell: bash
        run: |
          sudo apt-get build-dep -y -- .
          dpkg-buildpackage --force-sign

      - name: Add .deb files to APT repository
        shell: bash
        run: |
          mv src/diepxuan/*.deb dists/
          while read -r file; do
            dpkg-deb -I "dists/$file"
            reprepro -V includedeb "$CODENAME" "dists/$file" || true
          done < <(ls dists/ | grep -E '.*(.deb)$')

      - name: Push changes to GitHub
        run: | 
          git add .
          git commit -m "Automatic add .deb files to APT repository"
          git push origin main

  package-publish:
    needs: package-build
    if: ${{ false }}
    permissions:
      contents: write
    uses: diepxuan/.github/.github/workflows/debian-package-publish.yml@main
    secrets:
      GPG_KEY: ${{ secrets.GPG_KEY }}
      GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
      GIT_COMMITTER_EMAIL: ${{ secrets.GIT_COMMITTER_EMAIL }}
      SSH_ID_RSA: ${{ secrets.SSH_ID_RSA }}